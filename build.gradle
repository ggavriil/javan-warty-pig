buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.2'
    }
}

allprojects {
    group 'com.github.cretz.jwp'
    version '0.1.0'

    apply plugin: 'java'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    repositories {
        mavenCentral()
    }
    javadoc {
        options.links 'https://docs.oracle.com/javase/8/docs/api/'
        // TODO: change when https://github.com/gradle/gradle/issues/2354 is fixed
        options.addStringOption 'Xdoclint:all', '-Xdoclint:-missing'
    }
    task packageJavadoc(type: Jar, dependsOn: 'javadoc') {
        from javadoc.destinationDir
        classifier = 'javadoc'
    }
    artifacts {
        archives packageJavadoc
    }
}

subprojects {
    task packageSources(type: Jar, dependsOn: 'classes') {
        from sourceSets.main.allSource
        classifier = 'sources'
    }
    artifacts {
        archives packageSources
    }
}

project(':agent') {
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'com.github.johnrengelman.shadow'
    dependencies {
        compile project(':fuzz')

        testCompile 'junit:junit:4.12'
        testCompile fileTree(dir: 'libs', include: ['*.jar'])
    }
    build.dependsOn 'shadowJar'
    shadowJar {
        relocate 'org.objectweb.asm', 'jwp.agent.shade.org.objectweb.asm'
        classifier = null
        manifest {
            attributes 'Premain-Class': 'jwp.agent.AgentBootstrap'
            attributes 'Can-Redefine-Classes': 'true'
            attributes 'Can-Retransform-Classes': 'true'
        }
    }
    test {
        dependsOn 'compileJava', 'shadowJar'
        jvmArgs '-javaagent:build/libs/agent-' + version + '.jar'
        outputs.upToDateWhen { false }
        testLogging.showStandardStreams = true
    }
    artifacts {
        archives shadowJar
    }

    // Change scope of jwp-fuzz to provided
    publishSettings(project, 'jwp-agent', 'Javan Warty Pig Agent', ['jwp-fuzz'])
}

project(':fuzz') {
    apply plugin: 'maven'
    apply plugin: 'signing'
    dependencies {
        compile 'org.ow2.asm:asm:6.0'
        compile 'org.ow2.asm:asm-commons:6.0'
        compile 'org.ow2.asm:asm-util:6.0'

        // Optional
        compileOnly 'com.squareup:javapoet:1.9.0'

        testCompile 'junit:junit:4.12'
    }
    test {
        outputs.upToDateWhen { false }
        testLogging.showStandardStreams = true
    }

    publishSettings(project, 'jwp-fuzz', 'Javan Warty Pig Fuzz Library')
}

project(':extras') {
    apply plugin: 'maven'
    apply plugin: 'signing'
    dependencies {
        compile 'com.squareup:javapoet:1.9.0'

        // Compile only because these classes come via the agent
        compileOnly project(':agent')

        testCompile 'junit:junit:4.12'
        testCompile project(':agent')
    }
    test {
        outputs.upToDateWhen { false }
        testLogging.showStandardStreams = true
    }

    // Change scope of agent to provided
    publishSettings(project, 'jwp-extras', 'Javan Warty Pig Extras Library', ['jwp-agent'])
}

project(':examples') {
    subprojects {
        apply plugin: 'application'
        run.systemProperties System.properties.findAll { it.key.startsWith("jwp.") }
        run.dependsOn ':agent:shadowJar'
        dependencies {
            compile project(':extras')
            compileOnly project(':agent')
        }
    }
}

project(':examples:csv') {
    mainClassName = 'jwp.examples.csv.Main'
    run.jvmArgs '-javaagent:../../agent/build/libs/agent-' + version + '.jar'
    test.jvmArgs '-javaagent:../../agent/build/libs/agent-' + version + '.jar'
    run.args 'src/test/java', 'jwp.examples.csv.MainTest'
    configurations {
        externalClasses
        externalSources
    }
    dependencies {
        compile 'com.opencsv:opencsv:4.1'
        testCompile 'junit:junit:4.12'

    }
    // Need to force UTF-8 due to how we store the test file and that it can have strange chars
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
    test {
        outputs.upToDateWhen { false }
        testLogging {
            afterSuite { desc, result ->
                if (!desc.parent) println("${result.successfulTestCount} of ${result.testCount} tests succeeded")
            }
        }
    }
    // Code coverage stuff with help from https://stackoverflow.com/a/
    apply plugin: 'jacoco'
    dependencies {
        testCompile 'com.opencsv:opencsv:4.1:sources@jar'
        externalClasses 'com.opencsv:opencsv:4.1'
        externalSources 'com.opencsv:opencsv:4.1:sources@jar'
    }
    task unzipExternalClasses(type: Copy) {
        from zipTree(configurations.externalClasses.files.first())
        into "$buildDir/tmp/externalClasses"
    }
    task unzipExternalSources(type: Copy) {
        from zipTree(configurations.externalSources.files.first())
        into "$buildDir/tmp/externalSources"
    }
    jacocoTestReport {
        dependsOn unzipExternalClasses, unzipExternalSources
        reports {
            xml.enabled true
            csv.enabled true
            html.enabled true
            html.destination file("${buildDir}/jacocoHtml")
        }
        additionalSourceDirs = files("$buildDir/tmp/externalSources")
        additionalClassDirs = files("$buildDir/tmp/externalClasses")
    }
}

project(':examples:htmlsan') {
    mainClassName = 'jwp.examples.htmlsan.Main'
    run.jvmArgs '-javaagent:../../agent/build/libs/agent-' + version + '.jar'
    dependencies {
        compile 'com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:20171016.1'
        compile 'org.owasp.encoder:encoder:1.2.1'
    }
    run.standardInput = System.in
}

project(':examples:simple') {
    mainClassName = 'jwp.examples.simple.Main'
    run.jvmArgs '-javaagent:../../agent/build/libs/agent-' + version + '.jar'
}


javadoc {
    def javadocProjects = [':fuzz', ':extras']
    source javadocProjects.collect { project(it).sourceSets.main.allJava }
    classpath = files(javadocProjects.collect { project(it).sourceSets.main.compileClasspath })
    destinationDir = file("${buildDir}/docs/javadoc")
}

//configurations.archives.artifacts.removeAll { it.archiveTask.is jar }

def publishSettings(project, projectName, projectDescription, changeScopeToProvided = []) {
    project.with {
        if (!project.hasProperty('ossrhUsername')) return

        archivesBaseName = projectName

        signing {
            sign configurations.archives
        }

        uploadArchives {
            repositories {
                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                    repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }
                    snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }
                    pom.project {
                        name projectName
                        packaging 'jar'
                        description projectDescription
                        url 'https://github.com/cretz/javan-warty-pig'
                        scm {
                            connection 'scm:git:git@github.com:cretz/javan-warty-pig.git'
                            developerConnection 'scm:git:git@github.com:cretz/javan-warty-pig.git'
                            url 'git@github.com:cretz/javan-warty-pig.git'
                        }
                        licenses {
                            license {
                                name 'MIT License'
                                url 'https://opensource.org/licenses/MIT'
                            }
                        }
                        developers {
                            developer {
                                id 'cretz'
                                name 'Chad Retz'
                                url 'https://github.com/cretz'
                            }
                        }
                    }
                }
            }
        }

        // Set some dependencies to provided scope
        def installer = install.repositories.mavenInstaller
        def deployer = uploadArchives.repositories.mavenDeployer
        [installer, deployer]*.pom*.whenConfigured { pom ->
            pom.dependencies.find { it.artifactId in changeScopeToProvided }.each { it.scope = 'provided' }
        }
    }
}

